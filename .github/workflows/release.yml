name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v27
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    
    - name: Setup Nix environment
      run: nix develop --command echo "Nix environment ready"
    
    - name: Run tests
      run: nix develop --command just test
    
    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build for Linux
      run: nix develop --command bash -c "GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o kite-mcp-server-linux-amd64 -ldflags='-s -w -X main.MCP_SERVER_VERSION=${{ steps.version.outputs.VERSION }}' main.go"
    
    - name: Build for macOS (Intel)
      run: nix develop --command bash -c "GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -o kite-mcp-server-darwin-amd64 -ldflags='-s -w -X main.MCP_SERVER_VERSION=${{ steps.version.outputs.VERSION }}' main.go"
    
    - name: Build for macOS (Apple Silicon)
      run: nix develop --command bash -c "GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build -o kite-mcp-server-darwin-arm64 -ldflags='-s -w -X main.MCP_SERVER_VERSION=${{ steps.version.outputs.VERSION }}' main.go"
    
    - name: Build for Windows
      run: nix develop --command bash -c "GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -o kite-mcp-server-windows-amd64.exe -ldflags='-s -w -X main.MCP_SERVER_VERSION=${{ steps.version.outputs.VERSION }}' main.go"
    
    - name: Make binaries executable
      run: |
        chmod +x kite-mcp-server-linux-amd64
        chmod +x kite-mcp-server-darwin-amd64
        chmod +x kite-mcp-server-darwin-arm64
        chmod +x kite-mcp-server-windows-amd64.exe

    # Desktop Extension Build (Conditional)
    - name: Check for desktop extension
      id: check_extension
      run: |
        if [ -d "desktop-extension-claude" ]; then
          echo "extension_exists=true" >> $GITHUB_OUTPUT
          echo "✅ Desktop extension directory found"
        else
          echo "extension_exists=false" >> $GITHUB_OUTPUT
          echo "ℹ️ Desktop extension directory not found, skipping extension build"
        fi

    - name: Set up Node.js (for extension)
      if: steps.check_extension.outputs.extension_exists == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install DXT CLI (for extension)
      if: steps.check_extension.outputs.extension_exists == 'true'
      run: npm install -g @anthropic-ai/dxt

    - name: Build extension binaries
      if: steps.check_extension.outputs.extension_exists == 'true'
      run: |
        cd desktop-extension-claude
        chmod +x build-binaries.sh sync-version.sh
        ./build-binaries.sh

    - name: Package desktop extension
      if: steps.check_extension.outputs.extension_exists == 'true'
      run: |
        cd desktop-extension-claude
        dxt pack .
        
        # Find the generated .dxt file
        DXT_FILE=$(find . -name "*.dxt" -type f | head -1)
        if [ -z "$DXT_FILE" ]; then
          echo "❌ No .dxt file generated"
          exit 1
        fi
        
        echo "✅ Extension packaged: $DXT_FILE"
        echo "dxt_file=$DXT_FILE" >> $GITHUB_ENV

    - name: Prepare release files
      id: release_files
      run: |
        # Base files (always included)
        FILES="kite-mcp-server-linux-amd64
        kite-mcp-server-darwin-amd64
        kite-mcp-server-darwin-arm64
        kite-mcp-server-windows-amd64.exe"
        
        # Add extension file if it exists
        if [ -n "${{ env.dxt_file }}" ] && [ -f "desktop-extension-claude/${{ env.dxt_file }}" ]; then
          FILES="$FILES
        desktop-extension-claude/${{ env.dxt_file }}"
          echo "✅ Including extension file: ${{ env.dxt_file }}"
        fi
        
        # Save files list for the release step
        echo "files<<EOF" >> $GITHUB_OUTPUT
        echo "$FILES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ steps.release_files.outputs.files }}
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}